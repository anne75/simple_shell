.\" zless /usr/share/man/man1/dash.1.gz
.\"
.TH SIMPLE_SHELL  "1.0" "December, 10, 2016" "holberton man page"
.SH NAME
.B simple_shell
- simple command interpreter (shell)
.SH SYNOPSIS
.B simple_shell
.PA COMMAND" "ARGUMENTS

.ad
.SH DESCRIPTION
.B simple_shell
is a simple versin of a command interpreter for the system.
This version of
.B simple_shell
is still a work in progress as it has limited built-ins functions.
It does not yet support aliasing and variable expansions.
.SS Overview
The simple_shell is a command that reads lines from either a file
(using < redirection)or the terminal, interprets them,
and generally executes other commands.
.SS Invocation
The simple_shell is invoked using
.PA ./simple_shell
It will then prompt before each command. If no piping has been done, it
reads commands from its standard input.
.SS Lexical Structure
The shell reads input in terms of lines from a file and breaks it up into
words at whitespace (blanks and tabs).
.SS Comments
All text written after a # in a line is considered a comment, and therefore not
addressed.
.SS Aliases
Not implemented, but as more experienced shell programmers have stated: Aliases
provide a convenient way for naive users to create shorthands fr
commands without having to learn how to create functions with arguments.
They can also be used to create lexically obscure code.
This use is discouraged.
.SS Commands
The simple commands handled here are interpreted this way:
The first word is considered to be a command, following words are arguments
which need not expansion.
.Ss Search and Execution
This simple shell handles two types of commands: builtin commands and normal
programs. And the command is searched for (by name) in that order.
The shell builtins are executed internally to the shell, without spawning a
new process like normal programs.
If the command name doesn't match a function or builtin, the
command is searched for as a normal program in the file system.
When a normal program is executed, the shell runs the program,
passing the arguments and the environment to the program.
.SS Path Search
When locating a command, the shell first looks to see if it has a shell
function by that name.
If a builtin command is not found, one of two things happen:
.IT
Command names containing a slash are simply executed without performing
any searches.
.IT
The shell searches each entry in
.EV PATH
in turn for the command.
The value of the
.EV PATH
variable should be a series of entries separated by colons.
Each entry consists of a directory name.
.SS Builtins
This section lists the current implemented builtins.
.TP
.B cd "[directory]"
Switch to the specified path.
.TP
.B env
Prints the environment variable
.TP
.B exit "[exitstatus]"
Terminates the shell process with exitstatus value. 0 by default.
.TP
.B getenv "NAME"
Return the value of the variable NAME if it exists
.TP
.B help "[command]"
Displays the syntax of the builtin command or all.
.TP
.B history
Lists the last 1000 commands
.TP
.B setenv "NAME VALUE"
Set or replaces variable NAME with value VALUE
.TP
.B unsetenv "NAME"
Unset the variable NAME from the environment.
.SH SEE ALSO
.Xr csh 1 ,
.Xr dash 1 ,
.Xr ksh 1 ,
.Xr sysctl 8
.SH BUGS
some...
.SH SOURCE CODE
https://github.com/anne75/simple_shell
.SH AUTHORS
Jay Wang - Anne Cognet
.SH HISTORY
Project done in 11 days in december 2016 while students at Holberton School

